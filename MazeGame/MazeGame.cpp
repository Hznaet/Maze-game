// MazeGame.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <conio.h>
#include "time.h"
#include "windows.h"
#include "CrtLib.h"

using namespace std;
using namespace crt;

const int LX = 75;
const int LY = 30;

const char player = (char)1;
// 0 - пустое пространство
// 1 - стена 
// 2 - выход
// 3 - игрок
// 4 - монета
// 6 - +время
// 7 - мина  -очки
// 8 - мина  -время

int maze[LY][LX] = {
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,0,3,1,8,0,1,1,1,1,0,0,0,1,1,1,0,0,4,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,0,0,0,0,0,0,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,0,1,1,0,1,0,0,0,0,0,1,0,0,1,1,0,1,1,1,1,0,0,0,1,0,1,0,1,0,4,0,1,0,0,0,0,1,4,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,0,4,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1},
    {1,0,0,0,0,1,1,1,0,1,1,1,1,0,1,1,6,0,0,0,1,0,1,1,1,0,0,0,1,0,1,0,1,0,1,1,1,1,0,1,0,0,0,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1},
    {1,0,1,1,0,1,1,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,1,1,1,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1},
    {1,0,0,1,0,0,0,1,0,1,0,1,1,1,0,0,0,1,1,0,1,1,1,0,1,0,1,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,4,0,0,1,1,1,1,1},
    {1,1,4,1,0,1,0,0,0,1,0,1,0,1,0,1,1,0,0,0,1,0,0,7,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,0,0,1,1,1,1,6,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1},
    {1,4,1,1,1,1,0,1,1,1,0,0,0,1,0,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,0,4,1,0,1,0,0,1,0,0,0,1,1,0,0,0,0,1,0,1,1,0,7,0,0,8,0,0,0,0,4,0,1,1,1,1,1,1,1,1,1,1,1},
    {1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,1,1,0,1,1,1,0,1,0,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,1,4,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,2,1,1},
    {1,0,1,1,1,1,0,1,1,1,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,1,1,0,1,1,0,0,0,0,1,1,4,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1},
    {1,0,0,0,0,1,0,1,1,1,0,1,0,1,1,1,1,0,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,0,0,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1},
    {1,0,1,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,0,1,4,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,6,1,1,1,1,0,1,0,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,8,1,1,1,0,1,0,1,0,1,0,0,1,0,0,1,1,0,0,0,1,1,0,1,4,0,1,4,1,0,1,1,0,1,1,0,1,0,0,0,0,1,1,1,4,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,7,1,1,1,1,1,1,1,1},
    {1,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,0,1,4,0,1,0,1,1,0,1,1,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,1,1,4,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,0,4,1,1},
    {1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,1,0,0,1,1,0,0,0,1,0,1,1,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,1,0,1,1,1,1,1,1,1,6,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1},
    {1,0,1,1,4,1,1,1,1,1,0,0,0,1,0,1,1,1,4,1,0,0,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,0,1,1,0,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1},
    {1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,1,0,1,4,1,1,0,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,4,1,1,0,0,1,1,1,0,4,1,0,1,1,1,0,1,1,1,1},
    {1,1,0,1,1,1,1,1,7,1,0,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,0,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1},
    {1,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,1,1,0,1,1,1,1,4,1,1,1,0,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1},
    {1,1,6,1,1,0,1,1,1,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,1,1,1,1,6,1,0,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1},
    {1,1,0,1,1,0,0,0,0,6,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1},
    {1,0,0,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,0,0,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,0,0,0,0,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1},
    {1,0,1,1,1,0,1,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,1,0,1,1,0,1,0,0,0,0,0,1,0,1,0,0,1,0,1,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,4,0,0,0,0,1,1,1,1,0,1,1,1,1},
    {1,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,1,0,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,0,1,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1},
    {1,4,0,0,1,0,1,1,1,4,1,1,0,0,0,1,1,1,1,0,8,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
};

// глобальные переменные
int hx, hy; // позиция игрока в лабиринте
int score = 0; // счет игры

int gameState = 0; // 0 - игра продолжается, 1 - выигрыш, 2 - закончилось время
int timeLimit = 120; // лимит игры в секундах
int gameTime; // оставшееся время

clock_t tstart; // значение счетчика таймера при старте игры

// Функция обновляет текущий счет на экране
void UpdateScore(int score)
{
    SetTextColor(1);
    GotoXY(35, 30); // ставим курсор на последнюю строку консоли
    setlocale(LC_ALL, "ru-RU"); // включаем локаль, ориентированную на кириллицу
    cout << "СЧЕТ: " << score;  // выводим счет на экран
    setlocale(LC_ALL, "C"); // возвращаем настройки локали по умолчанию
    SetTextColor(15);
    SetTextBackground(0);
}

// Функция обновляет оставшееся время до окончания игры
// параметр t функции - это текущее значение системного таймера, на момент вызова функции
void UpdateClock(clock_t t, clock_t tstart, int& gameState, int& gameTime, int& timeLimit)
{
    SetTextColor(2);
    gameTime = timeLimit - (t - tstart) / CLOCKS_PER_SEC; /* вычисляем оставшееся время в секундах
                    и помещаем результат в gameTime. (t-tstart) - кол-во миллисекунд, прошедшее
                    с момента старта игры. CLOCKS_PER_SEC - константа, определяющая количество
                    изменений системного таймера за 1 секунду. Для Windows это значение 
                    равно 1000. Вычитая из timeLimit время, прошедшее с начала игры, мы вычисляем
                    остаток времени в секундах */
    setlocale(LC_ALL, "ru-RU"); // переключаем локаль
    if (gameTime < 0) // проверяем, закончилось ли время
    {
        gameState = 2; // если да, то обновляем статус игры на 2 - игрок ПРОИГРАЛ
    }
    else 
    {  // если время осталось
        GotoXY(49, 30); // ставим курсор на последнюю строку
        cout << "Осталось: " << gameTime << " секунд "; // выводим остаток времени в консоль
    }
    setlocale(LC_ALL, "C"); // восстанавливаем настройки локали
    SetTextColor(15);
    SetTextBackground(0);
}

// Функция печатает в консоли лабиринт
void PrintMaze(int maze[LY][LX], int sizeX, int sizeY)
{
    for (int i = 0; i < sizeY; i++)
    {
        for (int j = 0; j < sizeX; j++)
        {
            switch (maze[i][j])
            {
            case 0:
                cout << ' ';
                break;
            case 1:
                SetTextColor(12);
                SetTextBackground(0);
                cout << (char)178;
                break;
            case 2:
                SetTextColor(7);
                cout << (char)176;
                break;
            case 3:
                SetTextColor(15);
                cout << player;
                break;
            case 4:
                SetTextColor(14);
                cout << '$';
                break;
            case 6:
                cout << (char)30;
                break;
            case 7:                     
                cout << (char)15;       
                break; 
            case 8:
                cout << (char)15;
                break;
            default:
                cout << '?';
            }
            SetTextColor(15);
            SetTextBackground(0);
        }
        cout << endl;
    }
}

// Функция определяет позицию игрока в массиве, обновляя значения глобальных переменных hx и hy
bool FindFirstPlayerPosition(int maze[LY][LX], int sizeX, int sizeY, int &hx, int &hy)
{
    setlocale(LC_ALL, "ru-RU");
    int KolichestvoIgrokov = 0;
    int KolichestvoVihodov = 0;


    for (int i = 0; i < sizeY; i++)                         // цикл пробегает массив по строкам
    {
        for (int j = 0; j < sizeX; j++)                     // цикл пробегает массив по столбцам
        {
            if (maze[i][j] == 3)                         // проверяем, если текущий элемент равен 3 - нашли
            {
                KolichestvoIgrokov++;                           // требуемую позицию
                hx = j;                                        // записываем столбец в hx
                hy = i;                                        // записываем строку в hy
                // завершаем работу функции
            }

            else if (maze[i][j] == 2)
            {
                KolichestvoVihodov++;
            }

        }
    }

    if (KolichestvoIgrokov == 1 && KolichestvoVihodov >= 1)
    {
        return true;
    }

    else if (KolichestvoIgrokov == 0 || KolichestvoIgrokov > 1 || KolichestvoVihodov == 0)
    {
        system("cls");
        cout << "Ошибка, лабиринт не правильный!" << endl;
        return false;
    }

    return false;

}

//Функция скрывает игрока с экрана и убирает его из лабиринта
void HidePlayer()
{
    maze[hy][hx] = 0; // записываем в текущую позицию матрицы число 0
    GotoXY(hx, hy); // устанавливаем курсор в позицию игрока в консоль
    cout << ' ';    // и печатаем пробел
}

// функция показывает на экране игрока и записывает его в лабиринт
void ShowPlayer()
{
    maze[hy][hx] = 3; // записываем в текущую позицию матрицы число 0
    GotoXY(hx, hy); // устанавливаем курсор в позицию игрока в консоль
    cout << player; // и печатаем образ игрока
}

// Функция перемещает игрока вверх на одну клетку, если это разрешено
void MovePlayer(int dx, int dy)
{
    if (hx + dx < LX && hy + dy < LY && hx + dx >= 0 && hy + dy >= 0) // проверяем, если текущая позиция игрока > 0 - то перемещаться можно
    {
        switch (maze[hy + dy][hx + dx]) // проверяем, что находится в ячейке матрицы на строку выше
        {
        case 0:                  // если там пусто, то ход возможен.
            HidePlayer();       // вызываем функцию, которая скрывает игрока с экрана и убирает из текущей позиции матрицы
            hx += dx;
            hy += dy;              // уменьшаем координату y
            ShowPlayer();       // отображаем игрока в новой позиции
            break;
        case 2:                 // если там дверь выхода
            HidePlayer();       // по аналогии с вышестоящим кодом перемещаем игрока в новую позицию
            hx += dx;
            hy += dy;
            ShowPlayer();
            UpdateScore(score += 500);  // добавляем 500 бонусов за достижение выхода из лабиринта
            gameState = 1;              // изменяем статус игры на ВЫИГРЫШ
            break;
        case 4:                 // если там монета
            HidePlayer();       // по аналогии с вышестоящим кодом перемещаем игрока в новую позицию
            hx += dx;
            hy += dy;
            ShowPlayer();
            UpdateScore(score += 100); // добавляем 100 бонусов за сбор монеты
            break;
        case 6:
            HidePlayer();       
            hx += dx;
            hy += dy;
            ShowPlayer();
            UpdateClock(clock(), tstart, gameState, gameTime, timeLimit += 10);
            break;
        case 7:
            HidePlayer();       
            hx += dx;
            hy += dy;
            ShowPlayer();
            UpdateScore(score -= 200); 
            break;
        case 8:
            HidePlayer();       
            hx += dx;
            hy += dy;
            ShowPlayer();
            UpdateClock(clock(), tstart, gameState, gameTime, timeLimit -= 8);
            break;
        }
    }

}

/// Функция выводит "victory" и "loss" 
void ShowGameOverMessage()
{
    system("cls");
    setlocale(LC_ALL, "ru-RU");

    if (gameState == 1) {

        // ПОБЕДА

        SetTextColor(2);

        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "`8.`888b           ,8'  8 8888     ,o888888o.8888888 8888888888 ,o888888o.     8 888888888o. `8.`8888.      ,8' " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << " `8.`888b         ,8'   8 8888    8888     `88.    8 8888    . 8888     `88.   8 8888    `88. `8.`8888.    ,8'  " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "  `8.`888b       ,8'    8 8888 ,8 8888       `8.   8 8888   ,8 8888       `8b  8 8888     `88  `8.`8888.  ,8'   " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "   `8.`888b     ,8'     8 8888 88 8888             8 8888   88 8888        `8b 8 8888     ,88   `8.`8888.,8'    " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "    `8.`888b   ,8'      8 8888 88 8888             8 8888   88 8888         88 8 8888.   ,88'    `8.`88888'     " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "     `8.`888b ,8'       8 8888 88 8888             8 8888   88 8888         88 8 888888888P'      `8. 8888      " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "      `8.`888b8'        8 8888 88 8888             8 8888   88 8888        ,8P 8 8888`8b           `8 8888      " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "       `8.`888'         8 8888 `8 8888       .8'   8 8888   `8 8888       ,8P  8 8888 `8b.          8 8888      " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "        `8.`8'          8 8888    8888     ,88'    8 8888    ` 8888     ,88'   8 8888   `8b.        8 8888      " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "         `8.`           8 8888     `8888888P'      8 8888       `8888888P'     8 8888     `88.      8 8888      " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                                                                                " << endl;

        SetTextColor(15);
        SetTextBackground(0);

    }
    if (gameState == 2) {

        // ПРОЙГРЫШ

        SetTextColor(4);

        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "8 8888         ,o888888o.       d888888o.      d888888o.  " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "8 8888      . 8888     `88.   .`8888:' `88.  .`8888:' `88." << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "8 8888     ,8 8888       `8b  8.`8888.   Y8  8.`8888.   Y8" << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "8 8888     88 8888        `8b `8.`8888.      `8.`8888.    " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "8 8888     88 8888         88  `8.`8888.      `8.`8888.   " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "8 8888     88 8888         88   `8.`8888.      `8.`8888.  " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "8 8888     88 8888        ,8P    `8.`8888.      `8.`8888. " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "8 8888     `8 8888       ,8P 8b   `8.`8888. 8b   `8.`8888." << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "8 8888      ` 8888     ,88'  `8b.  ;8.`8888 `8b.  ;8.`8888" << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "8 888888888888 `8888888P'     `Y8888P ,88P'  `Y8888P ,88P'" << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;
        cout << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << '\t' << "                                                          " << endl;


        SetTextColor(15);
        SetTextBackground(0);

    }

}

// Функция обрабатывает события клавиатуры и управляет игрой
void Control(int& gameState)
{
    tstart = clock();  // запоминаем счетчик системного таймера в момент старта игры.
    UpdateScore(score); // обновляем счет игры, изначально он нулевой
    unsigned char x;  // это переменная хранит символ, соответствующий нажатой клавише
    while (gameState == 0)  // цикл игры - пока gameState == 0, игра идет
    {
        UpdateClock(clock(), tstart, gameState, gameTime, timeLimit);   // обновляем оставшееся время
        if (_kbhit())           // если была нажата клавиша - то обрабатываем ее, иначе следующая
        {                       // итерация игрового цикла
            x = _getch();       // считываем символ нажатой клавиш,
            if (x == 27) return;// если это символ Esc (27) то это выход из игры
            if (x == 0xe0)      // если это символ с кодом 0xE0 (шестнадцатеричное)
                switch (_getch()) // то считываем еще один символ (некоторые клавиши выдают двойные коды)
                {
                case 72:          // если 2-й символ код 72, то это клавиша курсор вверх
                    MovePlayer(0, -1);       // идем вверх
                    break;
                case 80:          // если 2-й символ код 80, то это клавиша курсор вниз
                    MovePlayer(0, 1);   // идем вниз
                    break;
                case 75:        // если 2-й символ код 75, то это клавиша курсор влево
                    MovePlayer(-1, 0);   // идем влево
                    break;
                case 77:
                    MovePlayer(1, 0);  // если 2 - й символ код 77, то это клавиша курсор вправо
                    break;      // идем вправо
                }
        }
        Sleep(200);             // останавливаем игру на 200 мсек, если этого не делать, то
    }                           // обновление игры будет слишком быстрым, мы не сможем управлять
}                               // игроком, а также напрасно нагрузим процессор ненужной работой

// Функция main, которая выполняется при запуске прграммы
int main()
{
    system("mode con cols=80 lines=31");
    system("cls");
    PrintMaze(maze, LX, LY);
    FindFirstPlayerPosition(maze, LX, LY, hx, hy);
    HideCursor();
    Control(gameState);
    ShowGameOverMessage();
    ShowCursor();
}

// ShowGameOverMessage, MovePlayer и FindFirstPlayerPosition
